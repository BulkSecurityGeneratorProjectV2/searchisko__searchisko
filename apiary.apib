HOST: http://dcp.jboss.org/v1

--- Distributed Contribution Platform API v1 ---
---
# Overview

**Distributed Contribution Platform** provides **REST API** for data manipulation and search.

# DCP Content object

This chapter describes main content object which can be pushed to and retrieved or searched from DCP.
 
DCP Content object is a JSON document with a free structure. There is no restriction how many key value pairs must be defined or in what structure.
Some system data fields are defined by DCP, some  are added into the content inside DCP. Those data fields are prefixed by `dcp_`:

* `dcp_type` - DCP wide normalized content type - eg. mailing-list email, issue, blogpost, IRC post, commit, discussion thread - system field, always necessary
* `dcp_id` - content id unique in the whole DCP platform - system field, always necessary. It is constructed during the 'Content Push API' operation from `dcp_content_type` and `dcp_content_id`.
* `dcp_content_provider` - identification of the provider that stored the given data into the platform - system field, always necessary - eg. 'jbossorg', 'seam_project' etc.
* `dcp_content_type` - identifier of the provider defined content type for 'Content Push API'. It is unique in the whole DCP so it starts with `dcp_content_provider`, eg. 'jbossorg_jira_issue', 'jbossorg_blog' etc. 
* `dcp_content_id` -  content identifier is passed in by the provider, it must be unique for the given `dcp_content_type`
* `dcp_updated` - date of last content update in DCP - system field, always necessary
* `dcp_project` - normalized DCP wide identifier of the project - system field - it is used for the project facet and filter in the Search API
* `dcp_contributors` - array of contributing persons, no duplicities in array, persons identifiers normalized during push into DCP - each person represented as String "Name Surname <primaryemail@email.com>" - in Search API used for persons facet and filter
* `dcp_activity_dates` - array of timestamps representing some activity on the content - in the Search API used for the time facet and filter
* `dcp_tags` - array of tags (Strings) - in the Search API used for facet (tagcloud) and filter - it is not directly pushed by the content provider because we plan a mechanism for additional user defined tags, so we need to rewrite this field internally. The content provider should use `tags` field instead.
* `dcp_title` - content title - used to present the document in the basic search GUI - it can be directly set by the content provider during the push operation.
* `dcp_url_view` - URL where the document can be viewed in its original system in human readable form - used to open the document from the basic search GUI - can be directly set by the content provider during the push
* `dcp_description` - short text representing the content - used to show the content in the basic search GUI for queries that do not produce highlights - it can be directly set by the content provider during the push


DCP Content described by example:

    {
        Free JSON Structure representing content. It can be one key - value pair or something more structured.
        It's defined only by content provider.

        "tags": ["Content_tag1", "tag2", "tag3"],

        "dcp_content_provider": "jbossorg",
        "dcp_content_type": "jbossorg_jira_issue",
        "dcp_content_id": "AS7-1254",
        "dcp_id": "jbossorg_jira_issue-AS7-1254",
        "dcp_type": "issue",
        "dcp_title": "AS7-1254 - Set the port_range on JGroups stacks to 1",
        "dcp_url_view": "https://issues.jboss.org/browse/AS7-1254",
        "dcp_description": "Set the port_range on JGroups stacks to 1 to lock down the ports.",
        "dcp_updated": "2012-12-06T06:34:55.000Z",
        "dcp_project": "as7",
        "dcp_contributors": ["John Doe <john@doe.org>", "Pat Mat <pat@mat.org>"],
        "dcp_activity_dates": ["2012-12-06T06:34:55.000Z", "2012-12-05T01:48:05.000Z"],
        "dcp_tags": ["Content_tag1", "tag2", "tag3", "user_defined_additional_tag"]
    }


# Authentication

Some operation calls on REST API need to be authenticated by the provider. The caller provides credentials by HTTP URL parameters `provider` and `pwd`, or via standard HTTP Basic authentication.

# Description of usual server HTTP response codes

* __200 ("OK")__ - the request was successful.
* __400 ("Bad Request")__ - the request could not be understood or did not have some required parameters. The body of the HTTP response contains the description of the problem.
* __401 ("Unauthorized")__ - authentication was required for the operation, but the credentials were not provided, or authentication failed.
* __403 ("Forbidden")__ - user doesn't have permissions for the requested operation.
* __404 ("Not Found")__ - resource was not found.
* __500 ("Internal error")__ - internal application error or misconfiguration, it should be reported to administrators. The body of the HTTP response contains the description of problem.
---

--
Content Push API
This part of API is primarily used by *content providers* to manipulate content in DCP. 

Each provider has set of 'provider types' defined in DCP, which are passed on this API as `{dcp_content_type}` URL path part.
'Provider type' is one type of content object stored into DCP by given provider (eg. issue from provider's issue tracking system, blog post from provider's blogging system etc).
To manipulate content objects over this API provider must use identifiers unique for given 'provider type'. These identifiers are referred as `{dcp_content_id}` url path part in API documentation.      
--

Get one content object of specified 'provider type' and 'provider id' from DCP.
GET /rest/content/{dcp_content_type}/{dcp_content_id}
< 200
< Content-Type: application/json
{
  "tags": ["Content_tag1", "tag2", "tag3"],
  "dcp_content_provider": "jbossorg",
  "dcp_content_type": "jbossorg_jira_issue",
  "dcp_content_id": "AS7-1254",
  "dcp_id": "jbossorg_jira_issue-AS7-1254",
  "dcp_type": "issue",
  "dcp_title": "AS7-1254 - Set the port_range on JGroups stacks to 1",
  "dcp_url_view": "https://issues.jboss.org/browse/AS7-1254",
  "dcp_description": "Set the port_range on JGroups stacks to 1 to lock down the ports.",
  "dcp_updated": "2012-12-06T06:34:55.000Z",
  "dcp_project": "as7",
  "dcp_contributors": ["John Doe <john@doe.org>", "Pat Mat <pat@mat.org>"],
  "dcp_activity_dates": ["2012-12-06T06:34:55.000Z", "2012-12-05T01:48:05.000Z"],
  "dcp_tags": ["Content_tag1", "tag2", "tag3", "user_defined_additional_tag"]
}


Get all content objects of the specified 'provider type'.

##### Request parameters

* `from` index of the first content object returned in the results array. The default value is 0 (start from begin of list).
* `size` of returned results array. Default is 10.
* `sort` you can use 'asc' or 'desc' value to sort results by date of last update of content object in DCP (`dcp_updated` field).   

##### Response content
The response contains a JSON structure with overall number of the content objects of specified 'provider type' in `total` field, and an array of the content objects in `hits` field. The content of the array depends on `from` and `size` request parameters.
Each record in the array contains `id` field with 'provider id' of the content object, and then `data` field with full content object structure:

```
{
  "total": "1",
  "hits": [
    {
      "id": "AS7-1254",
      "data": {
        //data object
      }
    }
  ]
}
```

GET /rest/content/{dcp_content_type}{?from,size,sort}
< 200
< Content-Type: application/json
{
  "total": "1",
  "hits": [
    {
      "id": "AS7-1254",
      "data": {
        "tags": ["Content_tag1", "tag2", "tag3"],
        "dcp_content_provider": "jbossorg",
        "dcp_content_type": "jbossorg_jira_issue",
        "dcp_content_id": "AS7-1254",
        "dcp_id": "jbossorg_jira_issue-AS7-1254",
        "dcp_type": "issue",
        "dcp_title": "AS7-1254 - Set the port_range on JGroups stacks to 1",
        "dcp_url_view": "https://issues.jboss.org/browse/AS7-1254",
        "dcp_description": "Set the port_range on JGroups stacks to 1 to lock down the ports.",
        "dcp_updated": "2012-12-06T06:34:55.000Z",
        "dcp_project": "as7",
        "dcp_contributors": ["John Doe <john@doe.org>", "Pat Mat <pat@mat.org>"],
        "dcp_activity_dates": ["2012-12-06T06:34:55.000Z", "2012-12-05T01:48:05.000Z"],
        "dcp_tags": ["Content_tag1", "tag2", "tag3", "user_defined_additional_tag"]
      }
    }
  ]
}

Push the content object into DCP. The content is updated in DCP if exists  or is inserted if does not. 
The data normalizations are performed during this request processing and the content object is extended by the DCP system data fields - the performed normalization tasks depend on the configuration for the given `dcp_content_type`.

*Provider authentication required.*

##### Response content
The response contains a JSON structure with a `status` field containing 'insert' or 'update' string and `message` field with a human readable description of the status.

```
{
  "status":"insert",
  "message":"Content was inserted successfully."
}
```

POST /rest/content/{dcp_content_type}/{dcp_content_id}
> Accept: application/json
< 200
< Content-Type: application/json
{
  "status":"insert",
  "message":"Content was inserted successfully."
}

Delete defined content object from DCP.

*Provider authentication required.* 

##### Request parameters

* `ignore_missing` if set to 'true' then __200 (OK)__ is returned instead of __404 (Not Found)__ if deleted content object doesn't exists in DCP.  
 
DELETE /rest/content/{dcp_content_type}/{dcp_content_id}{?ignore_missing}
< 200
< Content-Type: plain/text
Content deleted successfully.


--
Search API
This part of the API is used by all systems that can use content stored in DCP.
--
Search contributions.
GET /rest/search?{query,type,sortBy,filters[start],filters[count],filters[tag]}

Search contributions based on input parameters

##### Request parameters

* `query` full text query
* `sortBy` sort result based on dcp_updated field. Value can be `old` or `new`
* `type` filters result only to specific `dcp_content_type`
* `filters[start]` start index. Default value is 0
* `filters[count]` count of returned entries. Default is 10
* `filters[tag]` filters result to specific tag

##### Response content

```
{
  "took":3,
  "timed_out":false,
  "_shards":{
    "total":5,
    "successful":5,
    "failed":0
   },
   "hits":{
     "total":393,
     "max_score":null,
     "hits":[
       {
         ...
       },{
         ...
       }
     ]
   }
}
```

< 200
< Content-Type: application/json
{
  "took":3,
  "timed_out":false,
  "_shards":{
    "total":5,
    "successful":5,
    "failed":0
   },
   "hits":{
     "total":393,
     "max_score":null,
     "hits":[]
   }
}

--
Query Suggestions
It can return suggestions for given user query such as *query completion*, *did you mean*, ... etc.

Returned JSON contains two highlevel objects:

```
{
  "view" : { ... },
  "model" : { ... }
}
```

#### View

The `view` represents the visual part of the query suggestions response.

It *always* contains the section `search` that will *always* have only one option matching the incoming user query (`${query_string}`).

It can then contain one or more additional sections (like `suggestions`, `filters`, `mails`, ... etc.). 

##### Example

```
"view" : {
  "search": {
    "caption" : "Search",
    "options" : ["${query_string}"]
  },
  "suggestions" : {
    "caption" : " ... ",
    "options" : [ ... ]
  },
  "filters" : {
    "caption" : " ... ",
    "options" : [ ... ]
  },
  ...
}
```

#### Model

The `model` represents possible "actions" that are relevant to the individual `option`s in the `view` part.
This means both `view` and `model` parts have the same highlevel structure and each `option`
in the `view` part has the corresponding "action" in the `model` part.

##### Example

```
"model" : {
  "search": { 
    "search": { "query": "${query_string}" }
  },
  "suggestions" : [ ... ],
  "filters" : [ ... ],
  ...
}
```

The individual actions are described using symbolic commands. An interpretation of these commands is up to the client. The following is just a recommendation about how client can interpret the commands:

##### Commands

`search` - execute a search for `query` value.

`suggestion` - replace the text in the search field with the `value`'s value.

`filter` - replace the current filters with provided filters.

`filter_add` - enable provided filters (on top of currently active filters).

... more TDB.
--

GET /rest/suggestions/query_string?q={user_query_string}
< 200
< Access-Control-Allow-Origin: *
{
    "view": {
        "search": {
            "caption": "Search",
            "options": ["${query_string}"]
        },
        "suggestions": {
            "caption": "Query Completions",
            "options": [
                "option #1",
                "option #2",
                "..."
            ]
        },
        "filters": {
            "caption": "Filters",
            "options": [
                "option #1",
                "option #2",
                "..."
            ]
        },
        "mails": {
            "caption": "Mails",
            "options": [
                "option #1",
                "option #2",
                "..."
            ]
        }
    },
    "model" : {
        "search": { 
            "search": { "query": "${query_string}" }
        },
        "suggestions" : [
            { "action #1": {} },
            { "action #2": {} },
            { }
        ],
        "filters": [
            { "action #1": {} },
            { "action #2": {} },
            { }
        ],
        "mails": [
            { "action #1": {} },
            { "action #2": {} },
            { }
        ]
    }
}


Example for user query 'Hiberna'.
GET /rest/suggestions/query_string?q=Hiberna
< 200
< Access-Control-Allow-Origin: *
{
    "view": {
        "search": {
            "caption": "Search",
            "options": ["Hiberna"]
        },
        "suggestions": {
            "caption": "Query Completions",
            "options": [
                "<strong>Hiberna</strong>te",
                "<strong>Hiberna</strong>te query",
                "<strong>Hiberna</strong>te session"
            ]
        },
        "filters": {
            "caption": "Filters",
            "options": [
                "<strong>Add</strong> project filter for <strong>Hibernate</strong>",
                "<strong>Add</strong> project filter for <strong>Infinispan</strong>",
                "<strong>Search</strong> project <strong>Hibernate</strong> only"
            ]
        },
        "mails": {
            "caption": "Mails",
            "options": [
                "<strong>Add</strong> some Mails filter",
                "Do some other fancy thing here",
                "Or do something else"
            ]
        }
    },
    "model" : {
        "search": { "search": { "query": "Hiberna" } },
        "suggestions" : [
            { "suggestion": { "value": "Hibernate" },         "search": { "query": "Hibernate" } },
            { "suggestion": { "value": "Hibernate query" },   "search": { "query": "Hibernate query" } },
            { "suggestion": { "value": "Hibernate session" }, "search": { "query": "Hibernate session" } }
        ],
        "filters": [
            { "filter_add": [ "Hibernate" ] },
            { "filter_add": [ "Infinispan" ] },
            { "filter": [ "Hibernate" ] }
        ],
        "mails": [
            { "filter_add": [ "foo" ] },
            {},
            {}
        ]
    }
}


