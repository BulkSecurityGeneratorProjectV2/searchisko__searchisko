HOST: http://dcp.jboss.org/v1

--- Distributed Contribution Platform API v1 ---
---
# Overview

**Distributed Contribution Platform** provides **REST API** for data manipulation and search.

# DCP Content object

This is main content object which can be pushed/retrieved or searched.
 
DCP Content object is JSON document with free structure. There is no restriction how many key value pairs must be defined or in which structure.
Some system data fields are defined by DCP, some of them are added into content inside DCP. Those data fields are prefixed by `dcp_`:

* `dcp_type` - DCP wide content type - eg. mailing-list email, issue, blogpost, IRC post - system field, always necessary
* `dcp_id` - content id unique in whole DCP platform - system field, always necessary. Is constructed in 'Content Push API' from `dcp_content_type` and `dcp_content_id`.
* `dcp_content_provider` - identification of provider who stored given data into platform - system field, always necessary - eg. 'jbossorg', 'seam_project' etc.
* `dcp_content_type` - identifier of provider defined content type for 'Content Push API'. Unique in whole DCP so starts with `dcp_content_provider`, eg. 'jbossorg_jira_issue', 'jbossorg_blog' etc. 
* `dcp_content_id` -  content identifier passed in by provider, must be unique for given `dcp_content_type`
* `dcp_updated` - date of last content update in DCP - system field, always necessary
* `dcp_project` - normalized DCP wide identifier of project - system field - in Search API used for project facet and filter
* `dcp_contributors` - array of contributing persons, no duplicities in array, persons identifiers normalized during push into DCP - each person represented as String "Name Surname <primaryemail@email.com>" - in Search API used for persons facet and filter
* `dcp_activity_dates` - array of timestamps representing some activity on this content - in Search API used for time facet and filter
* `dcp_tags` - array of tags (Strings) - in Search API used for facet (tagcloud) and filter - do not directly pushed by content provider because we plan mechanism for user defined additional tags, so we need to rewrite this field internally. Content provider should use `tags` field instead.
* `dcp_title` - content title - used to present document in basic search GUI - can be directly set by content provider during push
* `dcp_url_view` - URL where document can be viewed in original system in human readable form - used to open document from basic search GUI - can be directly set by content provider during push
* `dcp_description` - short text representing content - used to show content in basic search GUI for queries which do not produce highlights - can be directly set by content provider during push

DCP Content described by example:

    {
        Free JSON Structure representing content. Can be one key value pair or something more structured.
        It's defined only by content provider.

        "tags": ["Content_tag1", "tag2", "tag3"],

        "dcp_content_provider": "jbossorg",
        "dcp_content_type: "jbossorg_jira_issue",
        "dcp_content_id": "AS7-1254",
        "dcp_id": "jbossorg_jira_issue-AS7-1254",
        "dcp_type": "issue",
        "dcp_title": "AS7-1254 - Set the port_range on JGroups stacks to 1",
        "dcp_url_view": "https://issues.jboss.org/browse/AS7-1254",
        "dcp_description": "Set the port_range on JGroups stacks to 1 to lock down the ports.",
        "dcp_updated": "2012-12-06T06:34:55.000Z",
        "dcp_project": "as7",
        "dcp_contributors": ["John Doe <john@doe.org>", "Pat Mat <pat@mat.org>"],
        "dcp_activity_dates": ["2012-12-06T06:34:55.000Z", "2012-12-05T01:48:05.000Z"],
        "dcp_tags": ["Content_tag1", "tag2", "tag3", "user_defined_additional_tag"]
    }

---

--
Authentication
Some operation calls on REST API need to be authenticated by provider. Caller provides credentials by HTTP URL parameters `provider` and `pwd`, or via standard HTTP Basic authentication.
If authentication is not successful, then standard Forbidden HTTP code is returned.
--

--
Content Push API
This part of API is used by content providers to manipulate content in DCP. 
--
Get defined content from DCP.
GET /rest/content/{dcp_content_type}/{dcp_content_id}
< 200
< Content-Type: application/json
{ "foo": "bar" }

< 404

Get all content of specified provider type.
GET /rest/content/{dcp_content_type}{?from,size,sort}
< 200
< Content-Type: application/json
{
    "total": "1",
    "hits": [
        {
          "id": "AS7-1254",
          "data": {
            "tags": ["Content_tag1", "tag2", "tag3"],
	          "dcp_content_provider": "jbossorg",
            "dcp_content_type: "jbossorg_jira_issue",
            "dcp_content_id": "AS7-1254",
            "dcp_id": "jbossorg_jira_issue-AS7-1254",
            "dcp_type": "issue",
            "dcp_title": "AS7-1254 - Set the port_range on JGroups stacks to 1",
            "dcp_url_view": "https://issues.jboss.org/browse/AS7-1254",
            "dcp_description": "Set the port_range on JGroups stacks to 1 to lock down the ports.",
            "dcp_updated": "2012-12-06T06:34:55.000Z",
            "dcp_project": "as7",
            "dcp_contributors": ["John Doe <john@doe.org>", "Pat Mat <pat@mat.org>"],
            "dcp_activity_dates": ["2012-12-06T06:34:55.000Z", "2012-12-05T01:48:05.000Z"],
            "dcp_tags": ["Content_tag1", "tag2", "tag3", "user_defined_additional_tag"]
          }
        }
    ]
}

JSON document in http body which is pushed to DCP.

Http body empty
POST /rest/content/{dcp_content_type}/{dcp_content_id}
> Accept: application/json
< 200
< Content-Type: application/json
{
  "status":"insert",
  "message":"Content was inserted successfully."
}

Delete defined content from DCP.
DELETE /rest/content/{dcp_content_type}/{dcp_content_id}{?ignore_missing}
< 200

< 404


--
Search API
This part of API is used by all systems who can use content stored in DCP. 
--
Search contributions.
GET /rest/search?TODO
< 200
{ "foo": "bar" }


--
Query Suggestions
It can return suggestions for given user query such as *query completion*, *did you mean*, ... etc.

Returned JSON contains two highlevel objects:

```
{
  "view" : { ... },
  "model" : { ... }
}
```

#### View

The `view` represents the visual part of query suggestions response.

It *always* contains section `search` which will *always* have only one option matching incoming user query (`${query_string}`).

It can then contain one or more additional sections (like `suggestions`, `filters`, `mails`, ... etc.). 

##### Example

```
"view" : {
  "search": {
    "caption" : "Search",
    "options" : ["${query_string}"]
  },
  "suggestions" : {
    "caption" : " ... ",
    "options" : [ ... ]
  },
  "filters" : {
    "caption" : " ... ",
    "options" : [ ... ]
  },
  ...
}
```

#### Model

The `model` represents possible "actions" that are relevant to individual `option`s in the `view` part.
This means both `view` and `model` parts have the same highlevel structure and each `option`
in the `view` part have corresponding "action" in the `model` part.

##### Example

```
"model" : {
  "search": { 
    "search": { "query": "${query_string}" }
  },
  "suggestions" : [ ... ],
  "filters" : [ ... ],
  ...
}
```

Individual actions are described using symbolic commands. Interpretation of these commands is up to the client
the following is just a recommendation about how client can interpret the commands:

##### Commands

`search` - execute search for `query` value.

`suggestion` - replace text in the search field with the `value`'s value.

`filter` - replace current filters with provided filters.

`filter_add` - enable provided filters (on top of currently active filters).

... more TDB.
--

GET /rest/suggestions/query_string?q={user_query_string}
< 200
< Access-Control-Allow-Origin: *
{
    "view": {
        "search": {
            "caption": "Search",
            "options": ["${query_string}"]
        },
        "suggestions": {
            "caption": "Query Completions",
            "options": [
                "option #1",
                "option #2",
                "..."
            ]
        },
        "filters": {
            "caption": "Filters",
            "options": [
                "option #1",
                "option #2",
                "..."
            ]
        },
        "mails": {
            "caption": "Mails",
            "options": [
                "option #1",
                "option #2",
                "..."
            ]
        }
    },
    "model" : {
        "search": { 
            "search": { "query": "${query_string}" }
        },
        "suggestions" : [
            { "action #1": {} },
            { "action #2": {} },
            { }
        ],
        "filters": [
            { "action #1": {} },
            { "action #2": {} },
            { }
        ],
        "mails": [
            { "action #1": {} },
            { "action #2": {} },
            { }
        ]
    }
}


Example for user query 'Hiberna'.
GET /rest/suggestions/query_string?q=Hiberna
< 200
< Access-Control-Allow-Origin: *
{
    "view": {
        "search": {
            "caption": "Search",
            "options": ["Hiberna"]
        },
        "suggestions": {
            "caption": "Query Completions",
            "options": [
                "<strong>Hiberna</strong>te",
                "<strong>Hiberna</strong>te query",
                "<strong>Hiberna</strong>te session"
            ]
        },
        "filters": {
            "caption": "Filters",
            "options": [
                "<strong>Add</strong> project filter for <strong>Hibernate</strong>",
                "<strong>Add</strong> project filter for <strong>Infinispan</strong>",
                "<strong>Search</strong> project <strong>Hibernate</strong> only"
            ]
        },
        "mails": {
            "caption": "Mails",
            "options": [
                "<strong>Add</strong> some Mails filter",
                "Do some other fancy thing here",
                "Or do something else"
            ]
        }
    },
    "model" : {
        "search": { "search": { "query": "Hiberna" } },
        "suggestions" : [
            { "suggestion": { "value": "Hibernate" },         "search": { "query": "Hibernate" } },
            { "suggestion": { "value": "Hibernate query" },   "search": { "query": "Hibernate query" } },
            { "suggestion": { "value": "Hibernate session" }, "search": { "query": "Hibernate session" } }
        ],
        "filters": [
            { "filter_add": [ "Hibernate" ] },
            { "filter_add": [ "Infinispan" ] },
            { "filter": [ "Hibernate" ] }
        ],
        "mails": [
            { "filter_add": [ "foo" ] },
            {},
            {}
        ]
    }
}


